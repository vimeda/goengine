// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vimeda/goengine (interfaces: MessagePayloadFactory)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MessagePayloadFactory is a mock of MessagePayloadFactory interface
type MessagePayloadFactory struct {
	ctrl     *gomock.Controller
	recorder *MessagePayloadFactoryMockRecorder
}

// MessagePayloadFactoryMockRecorder is the mock recorder for MessagePayloadFactory
type MessagePayloadFactoryMockRecorder struct {
	mock *MessagePayloadFactory
}

// NewMessagePayloadFactory creates a new mock instance
func NewMessagePayloadFactory(ctrl *gomock.Controller) *MessagePayloadFactory {
	mock := &MessagePayloadFactory{ctrl: ctrl}
	mock.recorder = &MessagePayloadFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MessagePayloadFactory) EXPECT() *MessagePayloadFactoryMockRecorder {
	return m.recorder
}

// CreatePayload mocks base method
func (m *MessagePayloadFactory) CreatePayload(arg0 string, arg1 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayload", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayload indicates an expected call of CreatePayload
func (mr *MessagePayloadFactoryMockRecorder) CreatePayload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayload", reflect.TypeOf((*MessagePayloadFactory)(nil).CreatePayload), arg0, arg1)
}
