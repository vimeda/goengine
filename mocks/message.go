// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vimeda/goengine (interfaces: Message)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	goengine "github.com/vimeda/goengine"
	metadata "github.com/vimeda/goengine/metadata"
	reflect "reflect"
	time "time"
)

// Message is a mock of Message interface
type Message struct {
	ctrl     *gomock.Controller
	recorder *MessageMockRecorder
}

// MessageMockRecorder is the mock recorder for Message
type MessageMockRecorder struct {
	mock *Message
}

// NewMessage creates a new mock instance
func NewMessage(ctrl *gomock.Controller) *Message {
	mock := &Message{ctrl: ctrl}
	mock.recorder = &MessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Message) EXPECT() *MessageMockRecorder {
	return m.recorder
}

// CreatedAt mocks base method
func (m *Message) CreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MessageMockRecorder) CreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*Message)(nil).CreatedAt))
}

// Metadata mocks base method
func (m *Message) Metadata() metadata.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(metadata.Metadata)
	return ret0
}

// Metadata indicates an expected call of Metadata
func (mr *MessageMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*Message)(nil).Metadata))
}

// Payload mocks base method
func (m *Message) Payload() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Payload indicates an expected call of Payload
func (mr *MessageMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*Message)(nil).Payload))
}

// UUID mocks base method
func (m *Message) UUID() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// UUID indicates an expected call of UUID
func (mr *MessageMockRecorder) UUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*Message)(nil).UUID))
}

// WithMetadata mocks base method
func (m *Message) WithMetadata(arg0 string, arg1 interface{}) goengine.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMetadata", arg0, arg1)
	ret0, _ := ret[0].(goengine.Message)
	return ret0
}

// WithMetadata indicates an expected call of WithMetadata
func (mr *MessageMockRecorder) WithMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMetadata", reflect.TypeOf((*Message)(nil).WithMetadata), arg0, arg1)
}
