// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vimeda/goengine (interfaces: MessagePayloadConverter)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MessagePayloadConverter is a mock of MessagePayloadConverter interface
type MessagePayloadConverter struct {
	ctrl     *gomock.Controller
	recorder *MessagePayloadConverterMockRecorder
}

// MessagePayloadConverterMockRecorder is the mock recorder for MessagePayloadConverter
type MessagePayloadConverterMockRecorder struct {
	mock *MessagePayloadConverter
}

// NewMessagePayloadConverter creates a new mock instance
func NewMessagePayloadConverter(ctrl *gomock.Controller) *MessagePayloadConverter {
	mock := &MessagePayloadConverter{ctrl: ctrl}
	mock.recorder = &MessagePayloadConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MessagePayloadConverter) EXPECT() *MessagePayloadConverterMockRecorder {
	return m.recorder
}

// ConvertPayload mocks base method
func (m *MessagePayloadConverter) ConvertPayload(arg0 interface{}) (string, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertPayload", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConvertPayload indicates an expected call of ConvertPayload
func (mr *MessagePayloadConverterMockRecorder) ConvertPayload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertPayload", reflect.TypeOf((*MessagePayloadConverter)(nil).ConvertPayload), arg0)
}
