// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vimeda/goengine (interfaces: EventStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	goengine "github.com/vimeda/goengine"
	metadata "github.com/vimeda/goengine/metadata"
	reflect "reflect"
)

// EventStore is a mock of EventStore interface
type EventStore struct {
	ctrl     *gomock.Controller
	recorder *EventStoreMockRecorder
}

// EventStoreMockRecorder is the mock recorder for EventStore
type EventStoreMockRecorder struct {
	mock *EventStore
}

// NewEventStore creates a new mock instance
func NewEventStore(ctrl *gomock.Controller) *EventStore {
	mock := &EventStore{ctrl: ctrl}
	mock.recorder = &EventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *EventStore) EXPECT() *EventStoreMockRecorder {
	return m.recorder
}

// AppendTo mocks base method
func (m *EventStore) AppendTo(arg0 context.Context, arg1 goengine.StreamName, arg2 []goengine.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendTo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendTo indicates an expected call of AppendTo
func (mr *EventStoreMockRecorder) AppendTo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendTo", reflect.TypeOf((*EventStore)(nil).AppendTo), arg0, arg1, arg2)
}

// Create mocks base method
func (m *EventStore) Create(arg0 context.Context, arg1 goengine.StreamName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *EventStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*EventStore)(nil).Create), arg0, arg1)
}

// HasStream mocks base method
func (m *EventStore) HasStream(arg0 context.Context, arg1 goengine.StreamName) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStream", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasStream indicates an expected call of HasStream
func (mr *EventStoreMockRecorder) HasStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStream", reflect.TypeOf((*EventStore)(nil).HasStream), arg0, arg1)
}

// Load mocks base method
func (m *EventStore) Load(arg0 context.Context, arg1 goengine.StreamName, arg2 int64, arg3 *uint, arg4 metadata.Matcher) (goengine.EventStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(goengine.EventStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *EventStoreMockRecorder) Load(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*EventStore)(nil).Load), arg0, arg1, arg2, arg3, arg4)
}
